 	case CLOCK_BYTES_OUT_POS_MSB:
            clock_obyte_data_pos(0);
            break;
        case CLOCK_BYTES_OUT_NEG_MSB:
            clock_obyte_data_neg(0);
            break;
        case CLOCK_BITS_OUT_POS_MSB:
            clock_obits_data_pos(0);
            break;
        case CLOCK_BITS_OUT_NEG_MSB:
            clock_obits_data_neg(0);
            break;
        case CLOCK_BYTES_IN_POS_MSB:
            clock_ibyte_data_pos(0);
            break;
        case CLOCK_BYTES_IN_NEG_MSB:
            clock_ibyte_data_neg(0);
            break;
        case CLOCK_BITS_IN_POS_MSB:
            clock_ibits_data_pos(0);
            printf("Now length is %02x current byte is %02x",get_current_length(),get_current_byte());
            break;
        case CLOCK_BITS_IN_NEG_MSB:
            clock_ibits_data_neg(0);
            break;
        case CLOCK_BYTES_IN_OUT_NORMAL_MSB:
            clock_iobyte_data(0,0);
            break;
        case CLOCK_BYTES_IN_OUT_INVERTED_MSB:
            clock_iobyte_data(1,0);
            break;
        case CLOCK_BITS_IN_OUT_NORMAL_MSB:
            clock_iobits_data(0,0);
            break;
        case CLOCK_BITS_IN_OUT_INVERTED_MSB:
            clock_iobits_data(1,0);
            break;
        case CLOCK_BYTES_OUT_POS_LSB:
            clock_obyte_data_pos(1);
            break;
        case CLOCK_BYTES_OUT_NEG_LSB:
            clock_obyte_data_neg(1);
            break;
        case CLOCK_BITS_OUT_POS_LSB:
            clock_obits_data_pos(1);
            break;
        case CLOCK_BITS_OUT_NEG_LSB:
            clock_obits_data_neg(1);
            break;
        case CLOCK_BYTES_IN_POS_LSB:
            clock_ibyte_data_pos(1);
            break;
        case CLOCK_BYTES_IN_NEG_LSB:
            clock_ibyte_data_neg(1);
            break;
        case CLOCK_BITS_IN_POS_LSB:
            clock_ibits_data_pos(1);
            break;
        case CLOCK_BITS_IN_NEG_LSB:
            clock_ibits_data_neg(1);
            break;
        case CLOCK_BYTES_IN_OUT_NORMAL_LSB:
             read_write_bytes_JTAG();
            //clock_iobyte_data(0,1);
            break;
        case CLOCK_BYTES_IN_OUT_INVERTED_LSB:
            clock_iobyte_data(1,1);
            break;
        case CLOCK_BITS_IN_OUT_NORMAL_LSB:
            read_write_bits_JTAG();
            //clock_iobits_data(0,1);
            break;
        case CLOCK_BITS_IN_OUT_INVERTED_LSB:
            clock_iobits_data(1,1);
            break;
        case CLOCK_DATA_TMS_POS:
            /* The next 2 bytes indicate the number of bits to clock out via TMS*/
            printf("Function unimplemented currently,using negative edge\r\n");
            clock_bits_tms();
            break;
        case CLOCK_DATA_TMS_NEG:
            /* The next 2 bytes indicate the number of bits to clock out via TMS*/
            clock_bits_tms();
            break;
        case TMS_READ_POS_POS:
            read_bits_write_TMS_JTAG();
            break;
        case TMS_READ_NEG_POS:
            read_bits_write_TMS_JTAG();
            break;
        case TMS_READ_POS_NEG:
            read_bits_write_TMS_JTAG();
            break;
        case TMS_READ_NEG_NEG:
            read_bits_write_TMS_JTAG();
            break;
        case SET_BITS_LOW:
            //Look again and verify that this can actually be done
            a = get_next_byte();
            b = get_next_byte();
            IOA = a;
            OEA = b;
            OEA = b;
            //decrement_total_byte_count(3);
            //printf("Write direction %02x, value %02x length %02d\r\n",a,b, ep2_buffer.total_length);
            break;
        case SET_BITS_HIGH:
            OEB = get_next_byte();
            IOB = get_next_byte();
            //decrement_total_byte_count(3);
            //printf("Write high bytes\r\n");
            break;
        case GET_BITS_LOW:
            //decrement_total_byte_count(1);
            //printf("Read low bytes\r\n");
            break;
        case GET_BITS_HIGH:
            //decrement_total_byte_count(1);
            //printf("Read high bytes\r\n");
            break;
        case LOOPBACK_START:
            break;
        case LOOPBACK_END:
            break;
        case TCK_DIVISOR:
            break;
        case SEND_IMMEDIATE:
            flush_ep1in_data();
            break;
        case WAIT_ON_HIGH:
            break;
        case WAIT_ON_LOW:
            break;
        case DIS_DIV_5:
            break;
        case EN_DIV_5:
            break;
        case EN_3_PHASE:
            break;
        case DIS_3_PHASE:
            break;
        case CLK_BITS:
            break;
        case CLK_BYTES:
            break;
        case CLK_WAIT_HIGH:
            break;
        case CLK_WAIT_LOW:
            break;
        case EN_ADAPTIVE:
            break;
        case DIS_ADAPTIVE:
            break;
        case CLK_BYTES_OR_HIGH:
            break;
        case CLK_BYTES_OR_LOW:
            break;
        default:
            //decrement_total_byte_count(1);
            printf("Command has not been implemented %02x\r\n",get_current_byte());
            break;
